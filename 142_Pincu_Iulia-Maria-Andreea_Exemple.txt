
--EXERCITIU: Găsirea tuturor angajaților care lucrează la un proiect al unei anumite firme.
SELECT DISTINCT a.ID_ANGAJAT, a.NUME, a.PRENUME
FROM ANGAJAT a
    --SUBCERERI SINCRONIZATE IN CARE SUNT 3 TABELE
JOIN TASK t ON a.ID_ANGAJAT = t.ID_ANGAJAT
JOIN PROIECT p ON t.ID_PROIECT = p.ID_PROIECT
JOIN FIRMA f ON p.CUI_FIRMA = f.CUI_FIRMA
WHERE f.NUME_FIRMA = 'ABC Company';

--EXERCITIU: Calculeaza orele de munca ale fiecarui angajat intr-o anumita perioada si spune daca rezonabil sau nu
--Grupări de date cu subcereri nesincronizate în care intervin cel puțin 3 tabele, funcții grup, filtrare la nivel de grupuri (în cadrul aceleiași cereri)
--Utilizarea a cel puțin 2 funcții pe șiruri de caractere, 2 funcții pe date calendaristice, a cel puțin unei expresii CASE
WITH angajati_task AS (
SELECT a.ID_ANGAJAT, a.NUME, a.PRENUME, SUM(t.DURATA_ORE) AS DURATA_TOTALA
FROM ANGAJAT a
JOIN TASK t ON a.ID_ANGAJAT = t.ID_ANGAJAT
WHERE t.DEADLINE BETWEEN TO_DATE('01-01-2023', 'DD-MM-YYYY') AND TO_DATE('31-12-2023', 'DD-MM-YYYY')
GROUP BY a.ID_ANGAJAT, a.NUME, a.PRENUME
)
SELECT a.ID_ANGAJAT,
UPPER(a.NUME) AS UPPER_NUME,
INITCAP(a.PRENUME) AS INITCAP_PRENUME,
TO_CHAR(SYSDATE, 'DD-MM-YYYY') AS CURRENT_DATE,
TRUNC(t.DEADLINE) AS TRUNC_DEADLINE,
CASE WHEN a.DURATA_TOTALA > 10 THEN 'Exces de timp' ELSE 'Timp rezonabil' END AS DURATA_STATUS
FROM (
SELECT at.ID_ANGAJAT, at.NUME, at.PRENUME, at.DURATA_TOTALA,
ROW_NUMBER() OVER (PARTITION BY at.ID_ANGAJAT ORDER BY at.ID_ANGAJAT) AS rn
FROM angajati_task at
) a
JOIN TASK t ON a.ID_ANGAJAT = t.ID_ANGAJAT
WHERE a.rn = 1;



--EXERCITIU: Verifica daca salariul a fost specificat la fiecare angajat
--Ordonare și utilizarea funcțiilor NVL și DECODE
SELECT b.ID_BIROU, a.NUME, a.PRENUME,
       NVL(a.SALARIU, 0) AS SALARIU,
       DECODE(a.SALARIU, NULL, 'Nespecificat', 'Specificat') AS SALARIU_STATUS
FROM BIROU b
JOIN ANGAJAT a ON b.ID_BIROU = a.ID_BIROU
WHERE a.SALARIU = (
    SELECT MAX(SALARIU)
    FROM ANGAJAT
    WHERE ID_BIROU = b.ID_BIROU
);

--EXERCITIU: Afiseaza numele si prenumele managerilor care au organizat cel putin o sedinta in care au participat mai mult de 3 angajati.
--Subcereri nesincronizate în clauza FROM
SELECT m.NUME, m.PRENUME
FROM (
    SELECT s.ID_MANAGER
    FROM SEDINTA s
    JOIN PARTICIPARE_SEDINTA ps ON s.ID_SEDINTA = ps.ID_SEDINTA
    GROUP BY s.ID_MANAGER, s.ID_SEDINTA
    HAVING COUNT(ps.ID_ANGAJAT) > 3
) subquery
JOIN MANAGER m ON subquery.ID_MANAGER = m.ID_MANAGER;


--EXERCITIU:  Să se afișeze numele și prenumele angajaților care lucrează în birourile cu capacitatea maximă și adresa biroului respectiv:
--Utilizarea a cel puțin 1 bloc de cerere (clauza WITH):
WITH max_capacity AS (
    SELECT MAX(CAPACITATE) AS max_cap
    FROM BIROU
), angajati_birou AS (
    SELECT A.NUME, A.PRENUME, L.ADRESA, B.CAPACITATE
    FROM ANGAJAT A
    JOIN BIROU B ON A.ID_BIROU = B.ID_BIROU
    JOIN LOCATIE L ON B.ID_LOCATIE = L.ID_LOCATIE
)
SELECT AB.NUME, AB.PRENUME, AB.ADRESA
FROM angajati_birou AB
WHERE AB.CAPACITATE = (SELECT max_cap FROM max_capacity);

--13

--Actualizarea salariului unui angajat pe baza biroului în care lucrează:
UPDATE ANGAJAT
SET SALARIU = 6000
WHERE ID_BIROU = (
    SELECT ID_BIROU
    FROM BIROU
    WHERE ID_LOCATIE = 5
);

--Actualizarea adresei unei locații pe baza numelui firmei cu care are contract:
UPDATE CLIENT
SET NUME = 'Catena'
WHERE ID_CLIENT = (
    SELECT ID_CLIENT
    FROM CONTRACT
    WHERE CUI_FIRMA = '123456789'
);

--Sterge participarea angajatului cu ID-ul 3 la toate ședințele.
DELETE FROM PARTICIPARE_SEDINTA
WHERE ID_ANGAJAT = 3
AND ID_SEDINTA IN (SELECT ID_SEDINTA FROM SEDINTA WHERE DATA < '26-JUL-2023');


--Schimba perioada unui proiect care are mai mult de 10 taskuri
UPDATE PROIECT
SET ID_PERIOADA = 5
WHERE ID_PROIECT IN (
    SELECT ID_PROIECT
    FROM TASK
    GROUP BY ID_PROIECT
    HAVING COUNT(*) > 10
);


--15
--Cererea care utilizează operația OUTER JOIN pe minimum 4 tabele: ????????
SELECT *
FROM CLIENT
LEFT JOIN CONTRACT ON CLIENT.ID_CLIENT = CONTRACT.ID_CLIENT
LEFT JOIN FIRMA ON CONTRACT.CUI_FIRMA = FIRMA.CUI_FIRMA
LEFT JOIN PROIECT ON FIRMA.CUI_FIRMA = PROIECT.CUI_FIRMA
LEFT JOIN TASK ON PROIECT.ID_PROIECT = TASK.ID_PROIECT;

--Cererea care utilizează operația DIVISION:
SELECT DISTINCT ANGAJAT.ID_ANGAJAT, ANGAJAT.NUME, ANGAJAT.PRENUME
FROM ANGAJAT
WHERE NOT EXISTS (
    SELECT *
    FROM PROIECT
    WHERE NOT EXISTS (
        SELECT *
        FROM TASK
        WHERE TASK.ID_PROIECT = PROIECT.ID_PROIECT
        AND TASK.ID_ANGAJAT = ANGAJAT.ID_ANGAJAT
    )
);

--Cererea care implementează analiza TOP-N:
SELECT *
FROM (
    SELECT ANGAJAT.ID_ANGAJAT, ANGAJAT.NUME, ANGAJAT.PRENUME, TASK.DURATA_ORE,
        ROW_NUMBER() OVER (ORDER BY TASK.DURATA_ORE DESC) AS rn
    FROM ANGAJAT
    INNER JOIN TASK ON ANGAJAT.ID_ANGAJAT = TASK.ID_ANGAJAT
) sub
WHERE rn <= 5;

--14

CREATE VIEW VizualizareAngajatBirou AS
SELECT a.NUME, a.PRENUME, a.SALARIU, b.ID_BIROU,
DECODE(b.CAPACITATE,
4, 'Birou mic',
5, 'Birou mediu',
7, 'Birou mare',
'Necunoscut') AS MESAJ_CAPACITATE
FROM ANGAJAT a
JOIN BIROU b ON a.ID_BIROU = b.ID_BIROU;

--operatie PERMISA

UPDATE VizualizareAngajatBirou
SET SALARIU = SALARIU + 500;


--operatie NEPERMISA

UPDATE VizualizareAngajatBirou
SET MESAJ_CAPACITATE = 'Birou extra-mare'
WHERE MESAJ_CAPACITATE = 'Birou mare';

