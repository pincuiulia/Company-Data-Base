CREATE TABLE CLIENT(
    ID_CLIENT NUMBER(4) PRIMARY KEY,
    NUME VARCHAR2(20) NOT NULL
);

CREATE TABLE FIRMA(
    CUI_FIRMA NUMBER(10)  PRIMARY KEY,
    NUME_FIRMA VARCHAR2(20) NOT NULL,
    COD_CAEN NUMBER(10) NOT NULL
);

CREATE TABLE CONTRACT(
       ID_CLIENT NUMBER(4),
       CUI_FIRMA NUMBER(10),
    PRIMARY KEY (ID_CLIENT, CUI_FIRMA),
    FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT(ID_CLIENT),
    FOREIGN KEY (CUI_FIRMA) REFERENCES FIRMA(CUI_FIRMA)
);

CREATE TABLE PERIOADA(
    ID_PERIOADA NUMBER(4),
    DATA_START DATE DEFAULT SYSDATE,
    DATA_FINISH DATE DEFAULT SYSDATE,
PRIMARY KEY (ID_PERIOADA)
);


CREATE TABLE LOCATIE(
    ID_LOCATIE NUMBER(4),
    ADRESA VARCHAR2(20),
    PRIMARY KEY (ID_LOCATIE)
);

CREATE TABLE BIROU(
    ID_BIROU NUMBER(4),
    ID_LOCATIE NUMBER(4),
    CAPACITATE NUMBER(1),
    PRIMARY KEY (ID_BIROU),
    FOREIGN KEY (ID_LOCATIE) REFERENCES LOCATIE(ID_LOCATIE)
);

CREATE TABLE ANGAJAT(
    ID_ANGAJAT NUMBER(4),
    NUME VARCHAR2(10),
    PRENUME VARCHAR2(10),
    SALARIU NUMBER(6,2),
    DATA_NASTERII DATE,
     ID_BIROU NUMBER(4),
     PRIMARY KEY (ID_ANGAJAT),
     FOREIGN KEY (ID_BIROU) REFERENCES BIROU(ID_BIROU)
);

CREATE TABLE MANAGER(
    ID_MANAGER NUMBER(4),
     NUME VARCHAR2(20),
    PRENUME VARCHAR2(20),
     DATA_NASTERII DATE DEFAULT SYSDATE,
     ANI_EXPERIENTA NUMBER(4),
     PRIMARY KEY (ID_MANAGER)
);

CREATE TABLE PROIECT(
    ID_PROIECT NUMBER(4) PRIMARY KEY,
    NUME_PROIECT VARCHAR2(15),
    ID_MANAGER NUMBER(4),
    ID_PERIOADA NUMBER(4),
    CUI_FIRMA NUMBER(10),
    FOREIGN KEY (ID_MANAGER) REFERENCES MANAGER(ID_MANAGER),
    FOREIGN KEY (ID_PERIOADA) REFERENCES PERIOADA(ID_PERIOADA),
    FOREIGN KEY (CUI_FIRMA) REFERENCES FIRMA(CUI_FIRMA)
);

CREATE TABLE TASK(
    ID_TASK NUMBER(4),
    DEADLINE DATE,
    DIFICULTATE VARCHAR2(5),
    DURATA_ORE NUMBER(4,1),
    ID_ANGAJAT NUMBER(4),
    ID_PROIECT NUMBER(4),
    PRIMARY KEY (ID_TASK),
    FOREIGN KEY (ID_ANGAJAT) REFERENCES ANGAJAT(ID_ANGAJAT),
    FOREIGN KEY (ID_PROIECT) REFERENCES PROIECT(ID_PROIECT)
);
CREATE TABLE SEDINTA(
    ID_SEDINTA NUMBER(4),
    ORA_START VARCHAR2(8),
    ORA_FINISH VARCHAR2(8),
    ID_MANAGER NUMBER(4),
    DATA DATE DEFAULT SYSDATE,
    PRIMARY KEY(ID_SEDINTA),
    FOREIGN KEY (ID_MANAGER) REFERENCES MANAGER(ID_MANAGER)
);

CREATE TABLE PARTICIPARE_SEDINTA(
    ID_SEDINTA NUMBER(4),
    ID_ANGAJAT NUMBER(4),
    CONFIRMARE VARCHAR(20),
    FOREIGN KEY (ID_SEDINTA) REFERENCES SEDINTA(ID_SEDINTA),
    FOREIGN KEY(ID_ANGAJAT) REFERENCES ANGAJAT(ID_ANGAJAT)
);
select * from PARTICIPARE_SEDINTA ;

--INSERARI
--CLIENT
INSERT INTO CLIENT (ID_CLIENT, NUME) VALUES (987, 'John');
INSERT INTO CLIENT (ID_CLIENT, NUME) VALUES (234, 'Alice');
INSERT INTO CLIENT (ID_CLIENT, NUME) VALUES (512, 'Michael');
INSERT INTO CLIENT (ID_CLIENT, NUME) VALUES (789, 'Emma');
INSERT INTO CLIENT (ID_CLIENT, NUME) VALUES (345, 'William');
INSERT INTO CLIENT (ID_CLIENT, NUME) VALUES (111, 'Sophia');
INSERT INTO CLIENT (ID_CLIENT, NUME) VALUES (222, 'Oliver');
INSERT INTO CLIENT (ID_CLIENT, NUME) VALUES (333, 'Ava');
INSERT INTO CLIENT (ID_CLIENT, NUME) VALUES (444, 'Liam');
INSERT INTO CLIENT (ID_CLIENT, NUME) VALUES (555, 'Isabella');

--FIRMA
INSERT INTO FIRMA (CUI_FIRMA, NUME_FIRMA, COD_CAEN) VALUES ('123456789', 'ABC Company', '6201');
INSERT INTO FIRMA (CUI_FIRMA, NUME_FIRMA, COD_CAEN) VALUES ('987654321', 'XYZ Corporation', '6202');
INSERT INTO FIRMA (CUI_FIRMA, NUME_FIRMA, COD_CAEN) VALUES ('456789123', 'DEF Ltd.', '6203');
INSERT INTO FIRMA (CUI_FIRMA, NUME_FIRMA, COD_CAEN) VALUES ('654321987', 'PQR Solutions', '6204');
INSERT INTO FIRMA (CUI_FIRMA, NUME_FIRMA, COD_CAEN) VALUES ('789123456', 'MNO Technologies', '6205');

--Contract

INSERT INTO CONTRACT (ID_CLIENT, CUI_FIRMA)
VALUES (
    (SELECT ID_CLIENT FROM CLIENT WHERE NUME = 'John'),
    (SELECT CUI_FIRMA FROM FIRMA WHERE NUME_FIRMA = 'ABC Company')
);


INSERT INTO CONTRACT (ID_CLIENT, CUI_FIRMA)
VALUES (
    (SELECT ID_CLIENT FROM CLIENT WHERE NUME = 'Alice'),
    (SELECT CUI_FIRMA FROM FIRMA WHERE NUME_FIRMA = 'XYZ Corporation')
);


INSERT INTO CONTRACT (ID_CLIENT, CUI_FIRMA)
VALUES (
    (SELECT ID_CLIENT FROM CLIENT WHERE NUME = 'Michael'),
    (SELECT CUI_FIRMA FROM FIRMA WHERE NUME_FIRMA = 'DEF Ltd.')
);

INSERT INTO CONTRACT (ID_CLIENT, CUI_FIRMA)
VALUES (
    (SELECT ID_CLIENT FROM CLIENT WHERE NUME = 'Emma'),
    (SELECT CUI_FIRMA FROM FIRMA WHERE NUME_FIRMA = 'PQR Solutions')
);

INSERT INTO CONTRACT (ID_CLIENT, CUI_FIRMA)
VALUES (
    (SELECT ID_CLIENT FROM CLIENT WHERE NUME = 'William'),
    (SELECT CUI_FIRMA FROM FIRMA WHERE NUME_FIRMA = 'MNO Technologies')
);


INSERT INTO CONTRACT (ID_CLIENT, CUI_FIRMA)
VALUES (
    (SELECT ID_CLIENT FROM CLIENT WHERE NUME = 'Michael'),
    (SELECT CUI_FIRMA FROM FIRMA WHERE NUME_FIRMA = 'ABC Company')
);

INSERT INTO CONTRACT (ID_CLIENT, CUI_FIRMA)
VALUES (
    (SELECT ID_CLIENT FROM CLIENT WHERE NUME = 'Emma'),
    (SELECT CUI_FIRMA FROM FIRMA WHERE NUME_FIRMA = 'MNO Technologies')
);

INSERT INTO CONTRACT (ID_CLIENT, CUI_FIRMA)
VALUES (
    (SELECT ID_CLIENT FROM CLIENT WHERE NUME = 'William'),
    (SELECT CUI_FIRMA FROM FIRMA WHERE NUME_FIRMA = 'PQR Solutions')
);

INSERT INTO CONTRACT (ID_CLIENT, CUI_FIRMA)
VALUES (
    (SELECT ID_CLIENT FROM CLIENT WHERE NUME = 'Sophia'),
    (SELECT CUI_FIRMA FROM FIRMA WHERE NUME_FIRMA = 'ABC Company')
);

INSERT INTO CONTRACT (ID_CLIENT, CUI_FIRMA)
VALUES (
    (SELECT ID_CLIENT FROM CLIENT WHERE NUME = 'Oliver'),
    (SELECT CUI_FIRMA FROM FIRMA WHERE NUME_FIRMA = 'XYZ Corporation')
);

INSERT INTO CONTRACT (ID_CLIENT, CUI_FIRMA)
VALUES (
    (SELECT ID_CLIENT FROM CLIENT WHERE NUME = 'Ava'),
    (SELECT CUI_FIRMA FROM FIRMA WHERE NUME_FIRMA = 'DEF Ltd.')
);

INSERT INTO CONTRACT (ID_CLIENT, CUI_FIRMA)
VALUES (
    (SELECT ID_CLIENT FROM CLIENT WHERE NUME = 'Liam'),
    (SELECT CUI_FIRMA FROM FIRMA WHERE NUME_FIRMA = 'PQR Solutions')
);

INSERT INTO CONTRACT (ID_CLIENT, CUI_FIRMA)
VALUES (
    (SELECT ID_CLIENT FROM CLIENT WHERE NUME = 'Isabella'),
    (SELECT CUI_FIRMA FROM FIRMA WHERE NUME_FIRMA = 'MNO Technologies')
);

--Perioada UTILIZAM O SECVENTA PENTRU A INSERA VALORI IN TABEL
CREATE SEQUENCE SEQ_PERIOADA
    INCREMENT BY 1
    START WITH 1
    MAXVALUE 9999
    NOCYCLE;

INSERT INTO PERIOADA (ID_PERIOADA, DATA_START, DATA_FINISH)
VALUES (SEQ_PERIOADA.NEXTVAL, TO_DATE('01-01-2023', 'DD-MM-YYYY'), TO_DATE('31-01-2023', 'DD-MM-YYYY'));

INSERT INTO PERIOADA (ID_PERIOADA, DATA_START, DATA_FINISH)
VALUES (SEQ_PERIOADA.NEXTVAL, TO_DATE('01-02-2023', 'DD-MM-YYYY'), TO_DATE('28-02-2023', 'DD-MM-YYYY'));

INSERT INTO PERIOADA (ID_PERIOADA, DATA_START, DATA_FINISH)
VALUES (SEQ_PERIOADA.NEXTVAL, TO_DATE('01-03-2023', 'DD-MM-YYYY'), TO_DATE('31-03-2023', 'DD-MM-YYYY'));

INSERT INTO PERIOADA (ID_PERIOADA, DATA_START, DATA_FINISH)
VALUES (SEQ_PERIOADA.NEXTVAL, TO_DATE('01-04-2023', 'DD-MM-YYYY'), TO_DATE('30-04-2023', 'DD-MM-YYYY'));

INSERT INTO PERIOADA (ID_PERIOADA, DATA_START, DATA_FINISH)
VALUES (SEQ_PERIOADA.NEXTVAL, TO_DATE('01-05-2023', 'DD-MM-YYYY'), TO_DATE('31-05-2023', 'DD-MM-YYYY'));


--Locatie
INSERT INTO LOCATIE (ID_LOCATIE, ADRESA)
VALUES (1, '123 Main Street');

INSERT INTO LOCATIE (ID_LOCATIE, ADRESA)
VALUES (2, '456 Elm Street');

INSERT INTO LOCATIE (ID_LOCATIE, ADRESA)
VALUES (3, '789 Oak Street');

INSERT INTO LOCATIE (ID_LOCATIE, ADRESA)
VALUES (4, '321 Pine Street');

INSERT INTO LOCATIE (ID_LOCATIE, ADRESA)
VALUES (5, '654 Maple Street');

--Birou

INSERT INTO BIROU (ID_BIROU, ID_LOCATIE, CAPACITATE)
VALUES (1, 5,5);

INSERT INTO BIROU (ID_BIROU, ID_LOCATIE,CAPACITATE)
VALUES (2, 4,4);

INSERT INTO BIROU (ID_BIROU, ID_LOCATIE,CAPACITATE)
VALUES (3, 3,7);

INSERT INTO BIROU (ID_BIROU, ID_LOCATIE,CAPACITATE)
VALUES (4, 2,5);

INSERT INTO BIROU (ID_BIROU, ID_LOCATIE,CAPACITATE)
VALUES (5, 1,4);

--Angajat

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (1, 'Smith', 'Ken', 5000, TO_DATE('15-05-1990', 'DD-MM-YYYY'), 4);


INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (2, 'Johnson', 'Emily', 4500, TO_DATE('22-09-1988', 'DD-MM-YYYY'), 2);

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (3, 'Brown', 'David', 5200, TO_DATE('07-11-1991', 'DD-MM-YYYY'), 3);

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (4, 'Wilson', 'Jessica', 4800, TO_DATE('12-03-1989', 'DD-MM-YYYY'), 4);

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (5, 'Miller', 'Andrew', 5100, TO_DATE('29-07-1992', 'DD-MM-YYYY'), 2);

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (6, 'Davis', 'Olivia', 4900, TO_DATE('05-12-1987', 'DD-MM-YYYY'), 3);

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (7, 'Taylor', 'William', 5300, TO_DATE('18-10-1993', 'DD-MM-YYYY'), 1);

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (8, 'Anderson', 'Sophia', 4600, TO_DATE('03-02-1991', 'DD-MM-YYYY'), 2);

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (9, 'Clark', 'Ethan', 4800, TO_DATE('11-06-1989', 'DD-MM-YYYY'), 1);

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (10, 'Walker', 'Ava', 5100, TO_DATE('26-04-1992', 'DD-MM-YYYY'), 1);

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (11, 'Smith', 'John', 4800, TO_DATE('12-03-1991', 'DD-MM-YYYY'), 4);

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (12, 'Johnson', 'Emma', 5100, TO_DATE('29-07-1988', 'DD-MM-YYYY'), 5);

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (13, 'Brown', 'Daniel', 5200, TO_DATE('07-11-1993', 'DD-MM-YYYY'), 3);

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (14, 'Wilson', 'Sophia', 4800, TO_DATE('12-03-1990', 'DD-MM-YYYY'),5 );

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (15, 'Miller', 'Matthew', 5300, TO_DATE('29-07-1987', 'DD-MM-YYYY'), 5);

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (16, 'Davis', 'Olivia', 4900, TO_DATE('05-12-1992', 'DD-MM-YYYY'),5 );

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (17, 'Taylor', 'Benjamin', 5100, TO_DATE('18-10-1991', 'DD-MM-YYYY'),3 );

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (18, 'Anderson', 'Isabella', 4600, TO_DATE('03-02-1989', 'DD-MM-YYYY'), 1);

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (19, 'Clark', 'Ethan', 4800, TO_DATE('11-06-1994', 'DD-MM-YYYY'), 2);

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (20, 'Walker', 'Mia', 5100, TO_DATE('26-04-1993', 'DD-MM-YYYY'), 3);

--Manager
INSERT INTO MANAGER (ID_MANAGER, NUME, PRENUME, DATA_NASTERII, ANI_EXPERIENTA)
VALUES
    (1, 'Popescu', 'Ion', TO_DATE('01-01-1985', 'DD-MM-YYYY'), 6);

INSERT INTO MANAGER (ID_MANAGER, NUME, PRENUME, DATA_NASTERII, ANI_EXPERIENTA)
VALUES
    (2, 'Ionescu', 'Maria', TO_DATE('15-07-1990', 'DD-MM-YYYY'), 4);

INSERT INTO MANAGER (ID_MANAGER, NUME, PRENUME, DATA_NASTERII, ANI_EXPERIENTA)
VALUES
    (3, 'Constantin', 'Andrei', TO_DATE('10-03-1988', 'DD-MM-YYYY'), 8);

INSERT INTO MANAGER (ID_MANAGER, NUME, PRENUME, DATA_NASTERII, ANI_EXPERIENTA)
VALUES
    (4, 'Georgescu', 'Elena', TO_DATE('05-09-1993', 'DD-MM-YYYY'), 3);

INSERT INTO MANAGER (ID_MANAGER, NUME, PRENUME, DATA_NASTERII, ANI_EXPERIENTA)
VALUES
    (5, 'Popa', 'Mihai', TO_DATE('20-11-1982', 'DD-MM-YYYY'), 9);

--PROIECT
INSERT INTO PROIECT (ID_PROIECT, NUME_PROIECT, ID_MANAGER, ID_PERIOADA, CUI_FIRMA)
VALUES (1, 'Iscoada', 1, 1, 123456789);

INSERT INTO PROIECT (ID_PROIECT, NUME_PROIECT, ID_MANAGER, ID_PERIOADA, CUI_FIRMA)
VALUES (2, 'Stefanini Dev', 2, 2, 987654321);

INSERT INTO PROIECT (ID_PROIECT, NUME_PROIECT, ID_MANAGER, ID_PERIOADA, CUI_FIRMA)
VALUES (3, 'Vinarte', 3, 3, 456789123);

INSERT INTO PROIECT (ID_PROIECT, NUME_PROIECT, ID_MANAGER, ID_PERIOADA, CUI_FIRMA)
VALUES (4, 'CCS', 4, 4, 654321987);

INSERT INTO PROIECT (ID_PROIECT, NUME_PROIECT, ID_MANAGER, ID_PERIOADA, CUI_FIRMA)
VALUES (5, 'Fashion House', 5, 5, 789123456);

--Task--task

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT, ID_PROIECT)
VALUES
    (1, TO_DATE('22-05-2023', 'DD-MM-YYYY'), 'USOR', 3.5,4,2);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (2, TO_DATE('23-05-2023', 'DD-MM-YYYY'), 'MEDIU', 5.2, 3,3);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (3, TO_DATE('24-05-2023', 'DD-MM-YYYY'), 'GREU', 8.0, 7,4);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (4, TO_DATE('25-05-2023', 'DD-MM-YYYY'), 'USOR', 2.1, 6,3);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (5, TO_DATE('26-05-2023', 'DD-MM-YYYY'), 'MEDIU', 6.3,1,2 );

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (6, TO_DATE('27-05-2023', 'DD-MM-YYYY'), 'GREU', 7.8, 13,3);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (7, TO_DATE('28-05-2023', 'DD-MM-YYYY'), 'USOR', 4.2, 17,3);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (8, TO_DATE('29-05-2023', 'DD-MM-YYYY'), 'MEDIU', 5.9, 11,2);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (9, TO_DATE('30-05-2023', 'DD-MM-YYYY'), 'GREU', 9.5,4,2);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (10, TO_DATE('31-05-2023', 'DD-MM-YYYY'), 'USOR', 2.8,9,4 );

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (11, TO_DATE('01-06-2023', 'DD-MM-YYYY'), 'MEDIU', 6.1,20,3);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (12, TO_DATE('02-06-2023', 'DD-MM-YYYY'), 'GREU', 8.4, 12,5);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (13, TO_DATE('03-06-2023', 'DD-MM-YYYY'), 'USOR', 3.2,14,5 );

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (14, TO_DATE('04-06-2023', 'DD-MM-YYYY'), 'MEDIU', 5.7, 15,5);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (15, TO_DATE('05-06-2023', 'DD-MM-YYYY'), 'GREU', 7.2,16,5 );

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (16, TO_DATE('06-06-2023', 'DD-MM-YYYY'), 'USOR', 2.9, 15,5);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (17, TO_DATE('07-06-2023', 'DD-MM-YYYY'), 'MEDIU', 6.5, 12,5);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (18, TO_DATE('08-06-2023', 'DD-MM-YYYY'), 'GREU', 8.8, 14,5);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (19, TO_DATE('09-06-2023', 'DD-MM-YYYY'), 'USOR', 4.1, 19,1);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (20, TO_DATE('10-06-2023', 'DD-MM-YYYY'), 'MEDIU', 5.6,16,5 );

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (21, TO_DATE('11-06-2023', 'DD-MM-YYYY'), 'GREU', 7.9,18,4 );

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (22, TO_DATE('12-06-2023', 'DD-MM-YYYY'), 'USOR', 3.8, 9,4);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (23, TO_DATE('13-06-2023', 'DD-MM-YYYY'), 'MEDIU', 6.7, 14,5);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (24, TO_DATE('14-06-2023', 'DD-MM-YYYY'), 'GREU', 9.2,5,1);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (25, TO_DATE('15-06-2023', 'DD-MM-YYYY'), 'USOR', 2.5,20,3 );

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (26, TO_DATE('16-06-2023', 'DD-MM-YYYY'), 'MEDIU', 5.3,2, 1);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (27, TO_DATE('17-06-2023', 'DD-MM-YYYY'), 'GREU', 7.6, 19,1);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (28, TO_DATE('18-06-2023', 'DD-MM-YYYY'), 'USOR', 3.7,8, 1);

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (29, TO_DATE('19-06-2023', 'DD-MM-YYYY'), 'MEDIU', 6.4,15,5 );

INSERT INTO TASK (ID_TASK, DEADLINE, DIFICULTATE, DURATA_ORE, ID_ANGAJAT,ID_PROIECT)
VALUES
    (30, TO_DATE('20-06-2023', 'DD-MM-YYYY'), 'GREU', 8.7,19, 1);

--sedinta

INSERT INTO SEDINTA (ID_SEDINTA, ORA_START, ORA_FINISH, ID_MANAGER, DATA)
VALUES (1, '09:00', '10:30', 2, TO_DATE('22-05-2023', 'DD-MM-YYYY'));

INSERT INTO SEDINTA (ID_SEDINTA, ORA_START, ORA_FINISH, ID_MANAGER, DATA)
VALUES (2, '14:00', '15:30', 3, TO_DATE('23-05-2023', 'DD-MM-YYYY'));

INSERT INTO SEDINTA (ID_SEDINTA, ORA_START, ORA_FINISH, ID_MANAGER, DATA)
VALUES (3, '11:30', '12:30', 1, TO_DATE('24-05-2023', 'DD-MM-YYYY'));

INSERT INTO SEDINTA (ID_SEDINTA, ORA_START, ORA_FINISH, ID_MANAGER, DATA)
VALUES (4, '16:00', '17:30',5 , TO_DATE('25-05-2023', 'DD-MM-YYYY'));

INSERT INTO SEDINTA (ID_SEDINTA, ORA_START, ORA_FINISH, ID_MANAGER, DATA)
VALUES (5, '09:30', '11:00',4, TO_DATE('26-05-2023', 'DD-MM-YYYY'));

--Participare sedinta
--1
INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (3, 2, 'CONFIRMAT');

INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (3, 5, 'NECONFIRMAT');

INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (3, 8, 'CONFIRMAT');

INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (3, 19, 'CONFIRMAT');

--2

INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (1, 1, 'CONFIRMAT');

INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (1, 4, 'NECONFIRMAT');

INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (1, 11, 'CONFIRMAT');


INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (2, 3, 'CONFIRMAT');

INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (2, 6, 'NECONFIRMAT');

INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (2, 13, 'CONFIRMAT');

INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (2, 17, 'CONFIRMAT');

INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (2, 20, 'NECONFIRMAT');


INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (5, 7, 'CONFIRMAT');

INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (5, 9, 'CONFIRMAT');


INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (4, 12, 'NECONFIRMAT');

INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (4, 14, 'CONFIRMAT');

INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (4, 15, 'NECONFIRMAT');

INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (4, 16, 'NECONFIRMAT');


//EXERCITII

--EXERCITIUL 6

SELECT * FROM PROIECT;


CREATE OR REPLACE PROCEDURE GestionareProiecte AS
  -- Definim tipurile de colectii
  TYPE NumeProiecte IS VARRAY(10) OF VARCHAR2(15); -- VARRAY pentru stocarea numelor proiectelor
  TYPE AngajatiProiect IS TABLE OF VARCHAR2(20); -- Nested Table pentru stocarea angaja?ilor
  TYPE OreAlocate IS TABLE OF NUMBER INDEX BY VARCHAR2(20); -- Tabel indexat pentru stocarea orelor alocate


  Proiecte NumeProiecte := NumeProiecte(); -- Initializam VARRAY-ul de proiecte

BEGIN
  -- identificam toate proiectele si colectam numele lor
  SELECT NUME_PROIECT
  BULK COLLECT INTO Proiecte -- extragem si stocam numele proiectelor în VARRAY
  FROM PROIECT;

  -- iteram prin fiecare proiect
  FOR i IN 1..Proiecte.COUNT LOOP
    DECLARE
      Angajati AngajatiProiect := AngajatiProiect(); -- Initializam Nested Table-ul de angajati pentru proiectul curent
      TotalOre OreAlocate;
    BEGIN
      -- identificam angajatii alocati pentru proiectul curent si calculam totalul orelor alocate pentru ei
      SELECT a.id_angajat
      BULK COLLECT INTO Angajati -- Extragem si stocam numele angajatilor în Nested Table
      FROM ANGAJAT a
      JOIN TASK t ON a.ID_ANGAJAT = t.ID_ANGAJAT
      WHERE t.ID_PROIECT = (SELECT ID_PROIECT FROM PROIECT WHERE NUME_PROIECT = Proiecte(i));

      FOR j IN Angajati.FIRST..Angajati.LAST LOOP
        SELECT SUM(DURATA_ORE)
        INTO TotalOre(Angajati(j)) -- calculam si stocam totalul orelor alocate pentru fiecare angajat
        FROM TASK
        WHERE ID_ANGAJAT = Angajati(j)
        AND ID_PROIECT = (SELECT ID_PROIECT FROM PROIECT WHERE NUME_PROIECT = Proiecte(i));
      END LOOP;

      -- afisam rezultatele pentru proiectul curent
      DBMS_OUTPUT.PUT_LINE('Proiect: ' || Proiecte(i)); -- afisam numele proiectului
      FOR j IN Angajati.FIRST..Angajati.LAST LOOP 
        DBMS_OUTPUT.PUT_LINE('Angajat: ' || Angajati(j) || ', Total ore: ' || TotalOre(Angajati(j))); -- afisam numele angajatului si totalul orelor alocate
      END LOOP;
    END;
  END LOOP;
END;
/


BEGIN 
    GestionareProiecte; 
END;
/

--stergem dupa ex9
select * from proiect;
DELETE FROM PROIECT
DELETE FROM PROIECT WHERE ID_PROIECT IN (6, 7, 8);



--EXERCITIUL 7


CREATE OR REPLACE PROCEDURE AfisareAngajatiPerLocatie AS
  -- cursor pentru selectarea locatiilor
  CURSOR c_locatii IS
    SELECT DISTINCT l.ID_LOCATIE, l.ADRESA
    FROM LOCATIE l
    JOIN BIROU b ON l.ID_LOCATIE = b.ID_LOCATIE;

  -- cursor parametrizat pentru selectarea angajatilor dintr-un birou specific
  CURSOR c_angajati (p_id_locatie NUMBER) IS
    SELECT a.NUME, a.PRENUME, a.SALARIU
    FROM ANGAJAT a
    JOIN BIROU b ON a.ID_BIROU = b.ID_BIROU
    WHERE b.ID_LOCATIE = p_id_locatie;

  v_id_locatie NUMBER;
  v_adresa VARCHAR2(20);
BEGIN
  -- parcurgem toate locatiile
  OPEN c_locatii;
  LOOP
    FETCH c_locatii INTO v_id_locatie, v_adresa;
    EXIT WHEN c_locatii%NOTFOUND;

    DBMS_OUTPUT.PUT_LINE('Loca?ie: ' || v_adresa);

    -- pentru fiecare locatie, parcurgem angajatii care lucreaza în birourile respective
    FOR rec IN c_angajati(v_id_locatie) LOOP
      DBMS_OUTPUT.PUT_LINE('  Angajat: ' || rec.NUME || ' ' || rec.PRENUME || ', Salariu: ' || rec.SALARIU);
    END LOOP;
  END LOOP;
  CLOSE c_locatii;
END;
/

-- Apelarea subprogramului
BEGIN
  AfisareAngajatiPerLocatie;
END;
/

select * from firma;

select * from proiect;



--EXERCITIUL 8

/*

TESTAM PENTRU VALORILE: 1,2,21,123
*/

CREATE OR REPLACE FUNCTION VerificaParticipareSedinte (p_id_angajat IN NUMBER)
RETURN VARCHAR2 IS

  AngajatInexistent EXCEPTION;
  FaraSedinte EXCEPTION;


  v_numar_sedinte NUMBER;
  v_numar_confirmari NUMBER;

BEGIN
  -- verificam daca angajatul exista
  SELECT COUNT(*)
  INTO v_numar_sedinte
  FROM ANGAJAT
  WHERE ID_ANGAJAT = p_id_angajat;

  IF v_numar_sedinte = 0 THEN
    RAISE AngajatInexistent;
  END IF;

  -- verificam numarul de sedinte confirmate
  SELECT COUNT(*)
  INTO v_numar_confirmari
  FROM PARTICIPARE_SEDINTA
  WHERE ID_ANGAJAT = p_id_angajat AND CONFIRMARE = 'CONFIRMAT';

  -- verificam dacă exista sedinte inregistrate pentru angajat
  SELECT COUNT(*)
  INTO v_numar_sedinte
  FROM PARTICIPARE_SEDINTA
  WHERE ID_ANGAJAT = p_id_angajat;

  IF v_numar_sedinte = 0 THEN
    RAISE FaraSedinte;
  ELSIF v_numar_confirmari < v_numar_sedinte THEN
    RETURN 'Angajatul nu s-a prezentat la toate sedintele confirmate.';
  ELSE
    -- afisam data sedintelor confirmate
   FOR rec IN (SELECT s.DATA, m.NUME || ' ' || m.PRENUME AS NUME_MANAGER
            FROM PARTICIPARE_SEDINTA ps
            JOIN SEDINTA s ON ps.ID_SEDINTA = s.ID_SEDINTA
            JOIN MANAGER m ON s.ID_MANAGER = m.ID_MANAGER
            WHERE ps.ID_ANGAJAT = p_id_angajat AND ps.CONFIRMARE = 'CONFIRMAT')
LOOP
  DBMS_OUTPUT.PUT_LINE('Data ședinței: ' || TO_CHAR(rec.DATA, 'DD-MM-YYYY') || ', Nume Manager: ' || rec.NUME_MANAGER);
END LOOP;

    RETURN 'Datele sedintelor la care angajatul a confirmat participarea sunt afisate mai sus.';
  END IF;

EXCEPTION
  WHEN AngajatInexistent THEN
    RETURN 'Angajatul specificat nu exista in baza de date.';
  WHEN FaraSedinte THEN
    RETURN 'Angajatul nu are sedinte inregistrate.';
END;
/

-- testarea functiei pentru un angajat specific
DECLARE
  v_rezultat VARCHAR2(100);
BEGIN
  v_rezultat := VerificaParticipareSedinte(123); 
  DBMS_OUTPUT.PUT_LINE(v_rezultat);
END;
/



select * from participare_sedinta;

INSERT INTO PARTICIPARE_SEDINTA (ID_SEDINTA, ID_ANGAJAT, CONFIRMARE)
VALUES (3, 1, 'NECONFIRMAT');

INSERT INTO PROIECT (ID_PROIECT, NUME_PROIECT, ID_MANAGER, ID_PERIOADA, CUI_FIRMA)
VALUES (6, 'Jaguar', 3, 221, 123456789);

INSERT INTO PROIECT (ID_PROIECT, NUME_PROIECT, ID_MANAGER, ID_PERIOADA, CUI_FIRMA)
VALUES (7, 'Vinarte', 4, 224, 123456789);


--EXERCITIUL 9

/*
Incercam pentru: Jaguar (fara locatii) , Fashion House (locatiile) , Vinarte (mai multe locatii cu acest nume),JBL (nu exista)  
*/



CREATE OR REPLACE PROCEDURE RaportDetaliatProiect(nume_p PROIECT.NUME_PROIECT%TYPE) AS
    TYPE TabelIndexLocatii IS TABLE OF LOCATIE.ADRESA%TYPE INDEX BY PLS_INTEGER;
    locatii TabelIndexLocatii;

    TYPE TabelIndexProiecte IS TABLE OF PROIECT%ROWTYPE INDEX BY PLS_INTEGER;
    proiecte TabelIndexProiecte;

    NO_DATA_FOUND_PROIECT EXCEPTION;
    TOO_MANY_ROWS_PROIECT EXCEPTION;

BEGIN
    -- colectarea proiectelor
    SELECT *
    BULK COLLECT INTO proiecte
    FROM PROIECT
    WHERE UPPER(NUME_PROIECT) = UPPER(nume_p);

    IF SQL%NOTFOUND THEN
    RAISE NO_DATA_FOUND_PROIECT;
    END IF;
    IF proiecte.count >= 2 THEN
    RAISE TOO_MANY_ROWS_PROIECT;
    END IF;

    -- colectarea locatiilor pentru proiect
    SELECT DISTINCT l.ADRESA
    BULK COLLECT INTO locatii
    FROM PROIECT p
    JOIN TASK t ON p.ID_PROIECT = t.ID_PROIECT
    JOIN ANGAJAT a ON t.ID_ANGAJAT = a.ID_ANGAJAT
    JOIN BIROU b ON a.ID_BIROU = b.ID_BIROU
    JOIN LOCATIE l ON b.ID_LOCATIE = l.ID_LOCATIE
    WHERE UPPER(p.NUME_PROIECT) = UPPER(nume_p);

    IF locatii.COUNT = 0 THEN
        RAISE NO_DATA_FOUND;
    END IF;

    -- afisarea locatiilor
    DBMS_OUTPUT.PUT_LINE('Locatiile pentru proiectul ' || nume_p || ':');
    FOR i IN 1..locatii.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE(locatii(i));
    END LOOP;

EXCEPTION
    WHEN NO_DATA_FOUND_PROIECT THEN
      DBMS_OUTPUT.PUT_LINE('Nu exista proiecte cu acest nume.');
    WHEN TOO_MANY_ROWS_PROIECT THEN
      DBMS_OUTPUT.PUT_LINE('Exista mai mult de un proiect cu acest nume.');
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('Nu exista locatii pentru proiectul specificat.');
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Codul de eroare: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('Mesajul erorii: ' || SQLERRM);
END;
/

DECLARE
    nume_p PROIECT.NUME_PROIECT%TYPE := 'Vinarte';  
BEGIN
    RaportDetaliatProiect(nume_p);
END;
/

select * from angajat;

-- 10 

CREATE TABLE LOG_OPERATII_PROIECT (
    ID_LOG NUMBER(4) PRIMARY KEY,
    DATA_ORA TIMESTAMP,
    ACTIUNE VARCHAR2(50)
);

CREATE SEQUENCE log_operatii_proiect_seq START WITH 1;

CREATE OR REPLACE TRIGGER trg_log_inserare_proiect
AFTER INSERT ON PROIECT
BEGIN
    INSERT INTO LOG_OPERATII_PROIECT (ID_LOG, DATA_ORA, ACTIUNE)
    VALUES (log_operatii_proiect_seq.NEXTVAL, SYSTIMESTAMP, 'Inserare in tabelul PROIECT');
END;
/

INSERT INTO PROIECT (ID_PROIECT, NUME_PROIECT, ID_MANAGER, ID_PERIOADA, CUI_FIRMA)
VALUES (8, 'Proiect Nou', 1, 221, 123456789);


SELECT * FROM LOG_OPERATII_PROIECT;




--11

CREATE TABLE LOG_ANGAJATI (
    ID_LOG NUMBER(4) PRIMARY KEY,
    ID_ANGAJAT NUMBER(4),
    DATA_ORA TIMESTAMP,
    ACTIUNE VARCHAR2(50)
);

-- Crearea unui sequence pentru ID-ul logurilor
CREATE SEQUENCE log_angajati_seq START WITH 1;

CREATE OR REPLACE TRIGGER trg_log_angajat
AFTER INSERT ON ANGAJAT
FOR EACH ROW
DECLARE
    varsta NUMBER;
BEGIN
    -- calcularea varstei angajatului
    varsta := TRUNC(MONTHS_BETWEEN(SYSDATE, :NEW.DATA_NASTERII) / 12);

    -- verifica daca angajatul are peste 34 de ani
    IF varsta > 34 THEN
        INSERT INTO LOG_ANGAJATI (ID_LOG, ID_ANGAJAT, DATA_ORA, ACTIUNE)
        VALUES (log_angajati_seq.NEXTVAL, :NEW.ID_ANGAJAT, SYSTIMESTAMP, 'Adaugare angajat nou peste 34 de ani');
    END IF;
END;
/

INSERT INTO ANGAJAT (ID_ANGAJAT, NUME, PRENUME, SALARIU, DATA_NASTERII, ID_BIROU)
VALUES (22, 'Popescu', 'Marin', 3000.00, TO_DATE('07-11-1988', 'DD-MM-YYYY'), 1);

SELECT * FROM LOG_ANGAJATI;

--12

CREATE TABLE LOG_TABLES (
    ID_LOG NUMBER(4) PRIMARY KEY,
    DATA_ORA TIMESTAMP,
    OPERATIUNE VARCHAR2(50),
    OBIECT VARCHAR2(50)
);

CREATE SEQUENCE log_tables_seq START WITH 1;

CREATE OR REPLACE TRIGGER trg_log_tables
AFTER CREATE ON SCHEMA
BEGIN
    IF ORA_DICT_OBJ_TYPE = 'TABLE' THEN
        INSERT INTO LOG_TABLES (ID_LOG, DATA_ORA, OPERATIUNE, OBIECT)
        VALUES (log_tables_seq.NEXTVAL, SYSTIMESTAMP, 'CREATE', ORA_DICT_OBJ_NAME);
    END IF;
END;
/

CREATE TABLE DEPARTAMENT (
    ID_DEPARTAMENT NUMBER(4) PRIMARY KEY,
    NUME_DEPARTAMENT VARCHAR2(50) NOT NULL,
    CUI_FIRMA NUMBER(10),
    FOREIGN KEY (CUI_FIRMA) REFERENCES FIRMA(CUI_FIRMA)
);

SELECT * FROM LOG_TABLES;

--13
CREATE OR REPLACE PACKAGE Cerinta_13 AS

    -- Procedura pentru gestionarea proiectelor
    PROCEDURE GestionareProiecte;

    -- Procedura pentru afișarea angajaților pe locații
    PROCEDURE AfisareAngajatiPerLocatie;

    -- Funcție pentru verificarea participării la ședințe
    FUNCTION VerificaParticipareSedinte (p_id_angajat NUMBER) RETURN VARCHAR2;

    -- Procedura pentru raport detaliat despre proiect
    PROCEDURE RaportDetaliatProiect(nume_p PROIECT.NUME_PROIECT%TYPE);

END Cerinta_13;
/

CREATE OR REPLACE PACKAGE BODY Cerinta_13 AS

PROCEDURE GestionareProiecte AS
  -- Definim tipurile de colecții
  TYPE NumeProiecte IS VARRAY(10) OF VARCHAR2(15); -- VARRAY pentru stocarea numelor proiectelor
  TYPE AngajatiProiect IS TABLE OF VARCHAR2(20); -- Nested Table pentru stocarea angajaților
  TYPE OreAlocate IS TABLE OF NUMBER INDEX BY VARCHAR2(20); -- Indexed table pentru stocarea orelor alocate

  -- Declaram variabilele colecțiilor
  Proiecte NumeProiecte := NumeProiecte(); -- initializam VARRAY-ul de proiecte

BEGIN
  -- identificam toate proiectele  si colectam numele lor
  SELECT NUME_PROIECT
  BULK COLLECT INTO Proiecte -- extragem și stocam numele proiectelor în VARRAY
  FROM PROIECT;

  -- iteram prin fiecare proiect
  FOR i IN 1..Proiecte.COUNT LOOP
    DECLARE
      Angajati AngajatiProiect := AngajatiProiect(); 
      TotalOre OreAlocate;
    BEGIN
      -- identificam angajatii alocati pentru proiectul curent si calculam totalul orelor alocate pentru ei
      SELECT a.id_angajat
      BULK COLLECT INTO Angajati -- extragem și stocam numele angajatilor 
      FROM ANGAJAT a
      JOIN TASK t ON a.ID_ANGAJAT = t.ID_ANGAJAT
      WHERE t.ID_PROIECT = (SELECT ID_PROIECT FROM PROIECT WHERE NUME_PROIECT = Proiecte(i));

      FOR j IN Angajati.FIRST..Angajati.LAST LOOP -- iteram prin fiecare angajat al proiectului
        SELECT SUM(DURATA_ORE)
        INTO TotalOre(Angajati(j)) -- calculam si stocam totalul orelor alocate pentru fiecare angajat
        FROM TASK
        WHERE ID_ANGAJAT = Angajati(j)
        AND ID_PROIECT = (SELECT ID_PROIECT FROM PROIECT WHERE NUME_PROIECT = Proiecte(i));
      END LOOP;

      -- afisam rezultatele pentru proiectul curent
      DBMS_OUTPUT.PUT_LINE('Proiect: ' || Proiecte(i)); -- afisam numele proiectului
      FOR j IN Angajati.FIRST..Angajati.LAST LOOP -- iteram prin fiecare angajat al proiectului
        DBMS_OUTPUT.PUT_LINE('Angajat: ' || Angajati(j) || ', Total ore: ' || TotalOre(Angajati(j))); -- afisam numele angajatului si totalul orelor alocate
      END LOOP;
    END;
  END LOOP;
END;

--7

PROCEDURE AfisareAngajatiPerLocatie AS
  -- cursor pentru selectarea locatiilor
  CURSOR c_locatii IS
    SELECT DISTINCT l.ID_LOCATIE, l.ADRESA
    FROM LOCATIE l
    JOIN BIROU b ON l.ID_LOCATIE = b.ID_LOCATIE;

  -- cursor parametrizat pentru selectarea angajatilor dintr-un birou specific
  CURSOR c_angajati (p_id_locatie NUMBER) IS
    SELECT a.NUME, a.PRENUME, a.SALARIU
    FROM ANGAJAT a
    JOIN BIROU b ON a.ID_BIROU = b.ID_BIROU
    WHERE b.ID_LOCATIE = p_id_locatie;

  v_id_locatie NUMBER;
  v_adresa VARCHAR2(20);
BEGIN
  -- parcurgem toate locatiile
  OPEN c_locatii;
  LOOP
    FETCH c_locatii INTO v_id_locatie, v_adresa;
    EXIT WHEN c_locatii%NOTFOUND;

    DBMS_OUTPUT.PUT_LINE('Locație: ' || v_adresa);

    -- pentru fiecare locatie, parcurgem angajatii care lucreaza in birourile respective
    FOR rec IN c_angajati(v_id_locatie) LOOP
      DBMS_OUTPUT.PUT_LINE('  Angajat: ' || rec.NUME || ' ' || rec.PRENUME || ', Salariu: ' || rec.SALARIU);
    END LOOP;
  END LOOP;
  CLOSE c_locatii;
END;

--8

FUNCTION VerificaParticipareSedinte (p_id_angajat IN NUMBER)
RETURN VARCHAR2 IS

  AngajatInexistent EXCEPTION;
  FaraSedinte EXCEPTION;


  v_numar_sedinte NUMBER;
  v_numar_confirmari NUMBER;

BEGIN
  -- verificam daca angajatul exista
  SELECT COUNT(*)
  INTO v_numar_sedinte
  FROM ANGAJAT
  WHERE ID_ANGAJAT = p_id_angajat;

  IF v_numar_sedinte = 0 THEN
    RAISE AngajatInexistent;
  END IF;

  -- verificam numarul de sedinte confirmate
  SELECT COUNT(*)
  INTO v_numar_confirmari
  FROM PARTICIPARE_SEDINTA
  WHERE ID_ANGAJAT = p_id_angajat AND CONFIRMARE = 'CONFIRMAT';

  -- verificam daca exista sedinte înregistrate pentru angajat
  SELECT COUNT(*)
  INTO v_numar_sedinte
  FROM PARTICIPARE_SEDINTA
  WHERE ID_ANGAJAT = p_id_angajat;

  IF v_numar_sedinte = 0 THEN
    RAISE FaraSedinte;
  ELSIF v_numar_confirmari < v_numar_sedinte THEN
    RETURN 'Angajatul nu s-a prezentat la toate sedintele confirmate.';
  ELSE
    -- afisam data sedintelor confirmate
   FOR rec IN (SELECT s.DATA, m.NUME || ' ' || m.PRENUME AS NUME_MANAGER
            FROM PARTICIPARE_SEDINTA ps
            JOIN SEDINTA s ON ps.ID_SEDINTA = s.ID_SEDINTA
            JOIN MANAGER m ON s.ID_MANAGER = m.ID_MANAGER
            WHERE ps.ID_ANGAJAT = p_id_angajat AND ps.CONFIRMARE = 'CONFIRMAT')
LOOP
  DBMS_OUTPUT.PUT_LINE('Data ședinței: ' || TO_CHAR(rec.DATA, 'DD-MM-YYYY') || ', Nume Manager: ' || rec.NUME_MANAGER);
END LOOP;

    RETURN 'Datele sedintelor la care angajatul a confirmat participarea sunt afisate mai sus.';
  END IF;

EXCEPTION
  WHEN AngajatInexistent THEN
    RETURN 'Angajatul specificat nu exista in baza de date.';
  WHEN FaraSedinte THEN
    RETURN 'Angajatul nu are sedinte inregistrate.';
END;


--9

PROCEDURE RaportDetaliatProiect(nume_p PROIECT.NUME_PROIECT%TYPE) AS
    TYPE TabelIndexLocatii IS TABLE OF LOCATIE.ADRESA%TYPE INDEX BY PLS_INTEGER;
    locatii TabelIndexLocatii;

    TYPE TabelIndexProiecte IS TABLE OF PROIECT%ROWTYPE INDEX BY PLS_INTEGER;
    proiecte TabelIndexProiecte;

    NO_DATA_FOUND_PROIECT EXCEPTION;
    TOO_MANY_ROWS_PROIECT EXCEPTION;

BEGIN
    -- Colectarea proiectelor
    SELECT *
    BULK COLLECT INTO proiecte
    FROM PROIECT
    WHERE UPPER(NUME_PROIECT) = UPPER(nume_p);

    IF SQL%NOTFOUND THEN
    RAISE NO_DATA_FOUND_PROIECT;
    END IF;
    IF proiecte.count >= 2 THEN
    RAISE TOO_MANY_ROWS_PROIECT;
    END IF;

    -- colectarea locatiilor pentru proiect
    SELECT DISTINCT l.ADRESA
    BULK COLLECT INTO locatii
    FROM PROIECT p
    JOIN TASK t ON p.ID_PROIECT = t.ID_PROIECT
    JOIN ANGAJAT a ON t.ID_ANGAJAT = a.ID_ANGAJAT
    JOIN BIROU b ON a.ID_BIROU = b.ID_BIROU
    JOIN LOCATIE l ON b.ID_LOCATIE = l.ID_LOCATIE
    WHERE UPPER(p.NUME_PROIECT) = UPPER(nume_p);

    IF locatii.COUNT = 0 THEN
        RAISE NO_DATA_FOUND;
    END IF;

    -- afisarea locatiilor
    DBMS_OUTPUT.PUT_LINE('Locatiile pentru proiectul ' || nume_p || ':');
    FOR i IN 1..locatii.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE(locatii(i));
    END LOOP;

EXCEPTION
        WHEN NO_DATA_FOUND_PROIECT THEN
                 DBMS_OUTPUT.PUT_LINE('Nu exista proiecte cu acest nume.');
        WHEN TOO_MANY_ROWS_PROIECT THEN
                 DBMS_OUTPUT.PUT_LINE('Exista mai mult de un proiect cu acest nume.');
        WHEN NO_DATA_FOUND THEN
                  DBMS_OUTPUT.PUT_LINE('Nu exista locatii pentru proiectul specificat.');
         WHEN OTHERS THEN
                   DBMS_OUTPUT.PUT_LINE('Codul de eroare: ' || SQLCODE);
                   DBMS_OUTPUT.PUT_LINE('Mesajul erorii: ' || SQLERRM);
END;


END Cerinta_13;
/



BEGIN 
    Cerinta_13.GestionareProiecte; 
END;
/

BEGIN
  Cerinta_13.AfisareAngajatiPerLocatie;
END;
/

DECLARE
  v_rezultat VARCHAR2(100);
BEGIN
  v_rezultat := Cerinta_13.VerificaParticipareSedinte(1);
  DBMS_OUTPUT.PUT_LINE(v_rezultat);
END;
/

BEGIN
  Cerinta_13.RaportDetaliatProiect('Fashion House');
END;
/



